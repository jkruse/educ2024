Use cWebView.pkg
Use cWebPanel.pkg
Use cWebForm.pkg
Use cWebGroup.pkg
Use cWebMenuGroup.pkg
Use cWebMenuItem.pkg
Use cWebCheckBox.pkg
Use cWebRadio.pkg

Object oDemoCheckboxRadio is a cWebView
    
    // Your DDO structure will go here
    
    Set peWebViewStyle to wvsDrillDown
    Set peViewType to vtZoom
    Set pbShowCaption to False
    Set Verify_Save_msg to 0 // don't confirm saves
    
    Set psCaption to "Styled Checkboxes & Radios"
    
    Set piMaxWidth to 1024
    Set piColumnCount to 12
    
    Object oWebMainPanel is a cWebPanel
        Set piColumnCount to 12
        
        Object oWebGroup1 is a cWebGroup
            Set psCaption to "Standard Checkbox"
            Set piColumnCount to 12
            Set piColumnSpan to 6
            
            Object oWebCheckbox1 is a cWebCheckbox
                Set piColumnSpan to 0
                Set psCaption to "Checked"
                Set psChecked to "1"
                Set psUnchecked to "0"
                Set psValue to "1"
                Set pbServerOnChange to True
                
                Procedure OnChange String sNewValue String sOldValue
                    Boolean bChecked
                    
                    Forward Send OnChange sNewValue sOldValue
                    
                    Get GetChecked to bChecked
                    If (bChecked) Begin
                        WebSet psCaption to "Checked"
                    End
                    Else Begin
                        WebSet psCaption to "Unchecked"
                    End
                End_Procedure
            End_Object
            
            Object oWebCheckbox2 is a cWebCheckbox
                Set piColumnSpan to 0
                Set psCaption to "Unchecked"
                Set psValue to "0"
                Set psUnchecked to "0"
                Set psChecked to "1"
                Set pbServerOnChange to True
                
                Procedure OnChange String sNewValue String sOldValue
                    Boolean bChecked
                    
                    Forward Send OnChange sNewValue sOldValue
                    
                    Get GetChecked to bChecked
                    If (bChecked) Begin
                        WebSet psCaption to "Checked"
                    End
                    Else Begin
                        WebSet psCaption to "Unchecked"
                    End
                End_Procedure
            End_Object
            
            Object oWebCheckbox3 is a cWebCheckbox
                Set piColumnSpan to 0
                Set psCaption to "Checked & Disabled"
                Set psValue to "1"
                Set psUnchecked to "0"
                Set psChecked to "1"
                Set pbEnabled to False
            End_Object
            
            Object oWebCheckbox4 is a cWebCheckbox
                Set piColumnSpan to 0
                Set psCaption to "Unchecked & Disabled"
                Set pbEnabled to False
                Set psValue to "0"
                Set psUnchecked to "0"
                Set psChecked to "1"
            End_Object
        End_Object
        
        Object oWebGroup2 is a cWebGroup
            Set psCaption to "Flipswitch Checkbox"
            Set piColumnCount to 12
            Set piColumnSpan to 6
            Set piColumnIndex to 6
            
            Object oWebCheckbox1 is a cWebCheckbox
                Set piColumnSpan to 0
                Set psCaption to "Checked"
                Set psChecked to "1"
                Set psUnchecked to "0"
                Set psValue to "1"
                Set pbServerOnChange to True
                Set psCSSClass to "FlipSwitch"
                
                Procedure OnChange String sNewValue String sOldValue
                    Boolean bChecked
                    
                    Forward Send OnChange sNewValue sOldValue
                    
                    Get GetChecked to bChecked
                    If (bChecked) Begin
                        WebSet psCaption to "Checked"
                    End
                    Else Begin
                        WebSet psCaption to "Unchecked"
                    End
                End_Procedure
            End_Object
            
            Object oWebCheckbox2 is a cWebCheckbox
                Set piColumnSpan to 0
                Set psCaption to "Unchecked"
                Set psValue to "0"
                Set psUnchecked to "0"
                Set psChecked to "1"
                Set pbServerOnChange to True
                Set psCSSClass to "FlipSwitch"
                
                Procedure OnChange String sNewValue String sOldValue
                    Boolean bChecked
                    
                    Forward Send OnChange sNewValue sOldValue
                    
                    Get GetChecked to bChecked
                    If (bChecked) Begin
                        WebSet psCaption to "Checked"
                    End
                    Else Begin
                        WebSet psCaption to "Unchecked"
                    End
                End_Procedure
            End_Object
            
            Object oWebCheckbox3 is a cWebCheckbox
                Set piColumnSpan to 0
                Set psCaption to "Checked & Disabled"
                Set psValue to "1"
                Set psUnchecked to "0"
                Set psChecked to "1"
                Set pbEnabled to False
                Set psCSSClass to "FlipSwitch"
            End_Object
            
            Object oWebCheckbox4 is a cWebCheckbox
                Set piColumnSpan to 0
                Set psCaption to "Unchecked & Disabled"
                Set pbEnabled to False
                Set psValue to "0"
                Set psUnchecked to "0"
                Set psChecked to "1"
                Set psCSSClass to "FlipSwitch"
            End_Object
        End_Object
        
        Object oWebGroup3 is a cWebGroup
            Set psCaption to "Radio"
            Set piColumnCount to 12
            Set piColumnSpan to 6
            
            Object oWebRadio1 is a cWebRadio
                Set piColumnSpan to 0
                Set psCaption to "Option 1"
                Set psRadioValue to "a"
            End_Object
            
            Object oWebRadio2 is a cWebRadio
                Set piColumnSpan to 0
                Set psCaption to "Option 2"
                Set psRadioValue to "b"
            End_Object
            
            Object oWebRadio3 is a cWebRadio
                Set piColumnSpan to 0
                Set psCaption to "Option 3"
                Set psRadioValue to "c"
            End_Object
        End_Object
        
        
        Object oWebGroup4 is a cWebGroup
            Set psCaption to "Radio Disabled"
            Set piColumnCount to 12
            Set piColumnSpan to 6
            Set piColumnIndex to 6
            
            Object oWebRadio1 is a cWebRadio
                Set piColumnSpan to 0
                Set psCaption to "Option 1"
                Set psRadioValue to "a"
                Set pbEnabled to False
            End_Object
            
            Object oWebRadio2 is a cWebRadio
                Set piColumnSpan to 0
                Set psCaption to "Option 2"
                Set psRadioValue to "b"
                Set pbEnabled to False
            End_Object
            
            Object oWebRadio3 is a cWebRadio
                Set piColumnSpan to 0
                Set psCaption to "Option 3"
                Set psRadioValue to "c"
                Set pbEnabled to False
            End_Object
        End_Object
        WebSetResponsive piColumnCount rmMobile to 6
        
        // place controls here.
        // Your view will grow as controls are added
        
        // This shows how using groups can be an effective to create a responsive view.
        
    End_Object
    
    // add action menu items here
    // we've included some common buttons
    
    Object oActionGroup is a cWebMenuGroup
        Set psGroupName to "MainActions"
        
        Object oSaveBtn is a cWebMenuItem
            Set psCaption to C_$Save
            Set psCSSClass to "WebSaveMenuItem"
            
            Procedure OnClick
                Send Request_Save
            End_Procedure
        End_Object
        
        Object oEditBtn is a cWebMenuItem
            Set psCaption to C_$CategoryEdit
            Set psCSSClass to "WebEditMenuItem"
            Procedure OnClick
                Send ChangeEditMode True
                Send SetActionButtons
            End_Procedure
        End_Object
        
        Object oDeleteBtn is a cWebMenuItem
            Set psCaption to C_$Delete
            Set psCSSClass to "WebDeleteMenuItem"
            Set peActionDisplay to adMenu
            
            Procedure OnClick
                Send Request_Delete
            End_Procedure
        End_Object
        
        Object oCancelChangesBtn is a cWebMenuItem
            
            Set psCaption to C_$ToolTipClear
            Set peActionDisplay to adMenu
            
            Procedure OnClick
                // this will undo any unchanged saves and show the latest
                Send RefreshRecord
            End_Procedure
        End_Object
        
    End_Object
    
    // This can be used to show and hide buttons based on context. This can be called
    // any time the view is active.
    Procedure SetActionButtons
        tWebNavigateData NavigateData
        Boolean bHasRecord
        Handle hoDD
        
        Get Server to hoDD
        Get GetNavigateData to NavigateData
        
        If (hoDD) Begin
            Get HasRecord of hoDD to bHasRecord
        End
        Else Begin
            Move False to bHasRecord
        End
        
        // let's hide all buttons and then show the ones we want
        WebSet pbRender of oEditBtn to False
        WebSet pbRender of oSaveBtn to False
        WebSet pbRender of oCancelChangesBtn to False
        WebSet pbRender of oDeleteBtn to False
        
        If (NavigateData.bReadOnly) Begin
            WebSet pbRender of oEditBtn to True
        End
        Else Begin
            WebSet pbRender of oSaveBtn to True
            WebSet pbRender of oCancelChangesBtn to True
            WebSet pbRender of oDeleteBtn to bHasRecord
        End
    End_Procedure
    
    // this will close the view after a save
    Procedure OnViewSaved Handle hoServer Boolean bChanged
        Send NavigateClose Self
    End_Procedure
    
    // this will close the view after a delete
    Procedure OnViewDeleted Handle hoDDO
        Send NavigateClose Self
    End_Procedure
    
    // Add code to customize your Zoon View based on how it was invoked.
    // Use NavigateData to determine the context this view will be used in.
    Procedure OnNavigateForward tWebNavigateData NavigateData Integer hoInvokingView Integer hoInvokingObject
        
        // if this view is being used in multiple contexts you may need a block of code
        // like this to handle customizations. This would include hiding rows and buttons
        // (WebSet pbRender) and changing the values of various captions.
        Case Begin
            Case (NavigateData.eNavigateType=nfFromMain)
                // If from main, this is a propbably a main file Select to Zoom.
                // This is the most typical way to navigate to a zoom.
                Case Break
            
            Case (NavigateData.eNavigateType=nfFromParent)
                // If from parent, this is a constrained drill down.
                // If needed you could check NaviateData.iTable to determine the constraining parent.
                // This would be unusual - normally you drill down from a parent to a list (Select view).
                Case Break
            
            Case (NavigateData.eNavigateType=nfFromChild)
                // If from child, this is a probably a parent Zoom from a Zoom.
                // This is unusual but it might be used for adding a new child record.
                Case Break
            
            Case Else // must be nfUndefined
                // This may be the start of a query or this may be used for some kind of
                // custom operation. You may have set NavigateData.eViewTask to provide more information
                // about this.
                
        Case End
        
        // Action buttons can be changed dynamically during a Zoom's display lifetime. It is
        // best to set these buttons in their own procedure so you can change later.
        Send SetActionButtons
        
    End_Procedure
    
End_Object


